/**
 * Created by Julien on 22.04.2017.
 */
var express = require('express');
var app = express();
var Web3 = require('web3');
const uuidV4 = require('uuid/v4');

app.post('/create-contract', function (req, res) {
    var Web3 = require('web3');
    var web3 = new Web3();
    web3.setProvider(new web3.providers.HttpProvider("https://ropsten.infura.io/M9lZzrrK6KtX7UleXK2E"));
    // solidity code code
    var source = "" +
        "contract test {\n" +
        "   function multiply(uint a) constant returns(uint d) {\n" +
        "       return a * 7;\n" +
        "   }\n" +
        "}\n";
    var compiled = web3.eth.compile.solidity(source);
    console.log(compiled);
    var code = compiled['<stdin>:test'].code;
    console.log(code);

    // contract json abi, this is autogenerated using solc CLI
    var abi = compiled['<stdin>:test'].info.abiDefinition;
    var myContract;
    web3.eth.defaultAccount = '0xdedb49385ad5b94a16f236a6890cf9e0b1e30392';

    console.log(web3.eth);

    // let's assume that coinbase is our account
    web3.eth.defaultAccount = web3.eth.coinbase;

    // create contract
    web3.eth.contract(abi).new({data: code}, function (err, contract) {
        if(err) {
            console.error(err);
            return;
            // callback fires twice, we only want the second call when the contract is deployed
        } else if(contract.address){
            myContract = contract;
            console.log('address: ' + myContract.address);
        }
    });

    console.log(contract);
});


app.get('/create-new-contract', function (req, res) {

});

app.get('/create-account', function (req, res) {
    var id = uuidV4();
    res.send(id);
});

app.listen(3000, function () {
    console.log('Example app listening on port 3000!');
});
